{
  "service": {
    "service": "orderService",
    "serviceObject": {
      "name": "orderService"
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs12.x",
      "stage": "dev",
      "region": "eu-west-1",
      "timeout": 10,
      "memorySize": 512,
      "versionFunctions": false,
      "vpc": {
        "securityGroupIds": [
          {
            "Ref": "LambdaSecurityGroup"
          }
        ],
        "subnetIds": [
          {
            "Ref": "PrivateSubnetOne"
          },
          {
            "Ref": "PrivateSubnetTwo"
          }
        ]
      },
      "package": {
        "excludeDevDependencies": true,
        "exclude": [
          ".git/**",
          ".vscode/**",
          ".test/**"
        ]
      },
      "environment": {
        "ENV": "dev",
        "MESSAGE": "dev env",
        "DYNAMO_TABLE_ORDERS": "dev-orderService-OrdersCatalog",
        "DYNAMO_TABLE_MESSAGES": "dev-orderService-MessagesCatalog",
        "SQS_QUEUE_URL": "https://sqs.eu-west-1.amazonaws.com/#{AWS::AccountId}/dev-orderService-messages-logs",
        "REGION": "eu-west-1"
      },
      "iamRoleStatements": [
        {
          "Effect": "Allow",
          "Action": [
            "dynamodb:DescribeTable",
            "dynamodb:Query",
            "dynamodb:Scan",
            "dynamodb:GetItem",
            "dynamodb:PutItem",
            "dynamodb:UpdateItem",
            "dynamodb:DeleteItem"
          ],
          "Resource": "arn:aws:dynamodb:*:*:*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "lambda:InvokeFunction",
            "lambda:InvokeAsync"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "sqs:DeleteMessage",
            "sqs:ReceiveMessage",
            "sqs:SendMessage"
          ],
          "Resource": "arn:aws:sqs:*:*:*"
        }
      ],
      "variableSyntax": "\\${([^{}:]+?(?:\\(|:)(?:[^:{}][^{}]*?)?)}",
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "Networking Stack",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "OdersLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/orderService-dev-Oders"
            }
          },
          "MessageServiceLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/orderService-dev-MessageService"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "orderService",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/orderService-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/orderService-dev*:*:*"
                          }
                        ]
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][0]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][1]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][2]"
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "sqs:ReceiveMessage",
                          "sqs:DeleteMessage",
                          "sqs:GetQueueAttributes"
                        ],
                        "Resource": [
                          {
                            "Fn::GetAtt": [
                              "OrdersQueueExample",
                              "Arn"
                            ]
                          }
                        ]
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "orderService",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              },
              "ManagedPolicyArns": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
                    ]
                  ]
                }
              ]
            }
          },
          "OdersLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/orderService/dev/1619570759412-2021-04-28T00:45:59.412Z/orderService.zip"
              },
              "Handler": "modules/orders/endpoint/index.handler",
              "Runtime": "nodejs12.x",
              "FunctionName": "orderService-dev-Oders",
              "MemorySize": 512,
              "Timeout": 10,
              "Environment": {
                "Variables": {
                  "ENV": "dev",
                  "MESSAGE": "dev env",
                  "DYNAMO_TABLE_ORDERS": "dev-orderService-OrdersCatalog",
                  "DYNAMO_TABLE_MESSAGES": "dev-orderService-MessagesCatalog",
                  "SQS_QUEUE_URL": {
                    "Fn::Sub": "https://sqs.${AWS::Region}.amazonaws.com/${AWS::AccountId}/dev-orderService-messages-logs"
                  },
                  "REGION": {
                    "Fn::Sub": "${AWS::Region}"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "VpcConfig": {
                "SecurityGroupIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"securityGroupIds\"]"
                },
                "SubnetIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"subnetIds\"]"
                }
              }
            },
            "DependsOn": [
              "OdersLogGroup"
            ]
          },
          "MessageServiceLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/orderService/dev/1619570759412-2021-04-28T00:45:59.412Z/orderService.zip"
              },
              "Handler": "modules/orders/functions/MessageService/handler.messageService",
              "Runtime": "nodejs12.x",
              "FunctionName": "orderService-dev-MessageService",
              "MemorySize": 512,
              "Timeout": 900,
              "Environment": {
                "Variables": {
                  "ENV": "dev",
                  "MESSAGE": "dev env",
                  "DYNAMO_TABLE_ORDERS": "dev-orderService-OrdersCatalog",
                  "DYNAMO_TABLE_MESSAGES": "dev-orderService-MessagesCatalog",
                  "SQS_QUEUE_URL": {
                    "Fn::Sub": "https://sqs.${AWS::Region}.amazonaws.com/${AWS::AccountId}/dev-orderService-messages-logs"
                  },
                  "REGION": {
                    "Fn::Sub": "${AWS::Region}"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "VpcConfig": {
                "SecurityGroupIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"securityGroupIds\"]"
                },
                "SubnetIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"subnetIds\"]"
                }
              },
              "ReservedConcurrentExecutions": 5
            },
            "DependsOn": [
              "MessageServiceLogGroup"
            ]
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "dev-orderService",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              },
              "Policy": ""
            }
          },
          "ApiGatewayResourceApi": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "api",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceApiOrders": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceApi"
              },
              "PathPart": "orders",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceApiOrdersOrderidVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceApiOrders"
              },
              "PathPart": "{orderId}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodApiOrdersOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceApiOrders"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodApiOrdersOrderidVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,GET,PUT'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceApiOrdersOrderidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodApiOrdersPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceApiOrders"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "OdersLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodApiOrdersOrderidVarPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {
                "method.request.path.orderId": true
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceApiOrdersOrderidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "OdersLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodApiOrdersGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceApiOrders"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "OdersLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodApiOrdersOrderidVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {
                "method.request.path.orderId": true
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceApiOrdersOrderidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "OdersLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodApiOrdersOrderidVarDelete": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "DELETE",
              "RequestParameters": {
                "method.request.path.orderId": true
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceApiOrdersOrderidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "OdersLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayDeployment1619570742535": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "dev"
            },
            "DependsOn": [
              "ApiGatewayMethodApiOrdersOptions",
              "ApiGatewayMethodApiOrdersOrderidVarOptions",
              "ApiGatewayMethodApiOrdersPost",
              "ApiGatewayMethodApiOrdersOrderidVarPut",
              "ApiGatewayMethodApiOrdersGet",
              "ApiGatewayMethodApiOrdersOrderidVarGet",
              "ApiGatewayMethodApiOrdersOrderidVarDelete"
            ]
          },
          "OdersLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "OdersLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "MessageServiceEventSourceMappingSQSOrdersQueueExample": {
            "Type": "AWS::Lambda::EventSourceMapping",
            "DependsOn": [
              "IamRoleLambdaExecution"
            ],
            "Properties": {
              "BatchSize": 1,
              "EventSourceArn": {
                "Fn::GetAtt": [
                  "OrdersQueueExample",
                  "Arn"
                ]
              },
              "FunctionName": {
                "Fn::GetAtt": [
                  "MessageServiceLambdaFunction",
                  "Arn"
                ]
              },
              "Enabled": true
            }
          },
          "VPC": {
            "Type": "AWS::EC2::VPC",
            "Properties": {
              "EnableDnsSupport": "true",
              "EnableDnsHostnames": "true",
              "CidrBlock": "10.0.0.0/16",
              "Tags": [
                {
                  "Key": "Name",
                  "Value": "VPC with public and private subnets (2 AZs) & NAT"
                },
                {
                  "Key": "Project",
                  "Value": "Prosperoware Content Sync"
                }
              ]
            }
          },
          "InternetGateway": {
            "Type": "AWS::EC2::InternetGateway",
            "Properties": {
              "Tags": [
                {
                  "Key": "Name",
                  "Value": "Internet Gateway"
                }
              ]
            }
          },
          "GatewayToInternet": {
            "Type": "AWS::EC2::VPCGatewayAttachment",
            "Properties": {
              "VpcId": {
                "Ref": "VPC"
              },
              "InternetGatewayId": {
                "Ref": "InternetGateway"
              }
            }
          },
          "NATGatewayOne": {
            "DependsOn": [
              "GatewayToInternet"
            ],
            "Type": "AWS::EC2::NatGateway",
            "Properties": {
              "AllocationId": {
                "Fn::GetAtt": [
                  "ElasticIPOne",
                  "AllocationId"
                ]
              },
              "SubnetId": {
                "Ref": "PublicSubnetOne"
              },
              "Tags": [
                {
                  "Key": "Name",
                  "Value": "NAT Gateway #1"
                }
              ]
            }
          },
          "ElasticIPOne": {
            "Type": "AWS::EC2::EIP",
            "Properties": {
              "Domain": "vpc",
              "Tags": [
                {
                  "Key": "Name",
                  "Value": "Elastic IP associated with NAT Gateway #1"
                }
              ]
            }
          },
          "NATGatewayTwo": {
            "DependsOn": [
              "GatewayToInternet"
            ],
            "Type": "AWS::EC2::NatGateway",
            "Properties": {
              "AllocationId": {
                "Fn::GetAtt": [
                  "ElasticIPTwo",
                  "AllocationId"
                ]
              },
              "SubnetId": {
                "Ref": "PublicSubnetTwo"
              },
              "Tags": [
                {
                  "Key": "Name",
                  "Value": "NAT Gateway #2"
                }
              ]
            }
          },
          "ElasticIPTwo": {
            "Type": "AWS::EC2::EIP",
            "Properties": {
              "Domain": "vpc",
              "Tags": [
                {
                  "Key": "Name",
                  "Value": "Elastic IP associated with NAT Gateway #2"
                }
              ]
            }
          },
          "PublicRouteTable": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
              "VpcId": {
                "Ref": "VPC"
              },
              "Tags": [
                {
                  "Key": "Name",
                  "Value": "Public Route Table"
                }
              ]
            }
          },
          "PublicRoute": {
            "Type": "AWS::EC2::Route",
            "Properties": {
              "RouteTableId": {
                "Ref": "PublicRouteTable"
              },
              "DestinationCidrBlock": "0.0.0.0/0",
              "GatewayId": {
                "Ref": "InternetGateway"
              }
            }
          },
          "PublicSubnetOne": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
              "VpcId": {
                "Ref": "VPC"
              },
              "MapPublicIpOnLaunch": true,
              "CidrBlock": "10.0.1.0/24",
              "AvailabilityZone": {
                "Fn::Select": [
                  "0",
                  {
                    "Fn::GetAZs": {
                      "Ref": "AWS::Region"
                    }
                  }
                ]
              },
              "Tags": [
                {
                  "Key": "Name",
                  "Value": "Public subnet #1"
                }
              ]
            }
          },
          "PublicSubnetOneRouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
              "SubnetId": {
                "Ref": "PublicSubnetOne"
              },
              "RouteTableId": {
                "Ref": "PublicRouteTable"
              }
            }
          },
          "PublicSubnetTwo": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
              "VpcId": {
                "Ref": "VPC"
              },
              "MapPublicIpOnLaunch": true,
              "CidrBlock": "10.0.2.0/24",
              "AvailabilityZone": {
                "Fn::Select": [
                  "1",
                  {
                    "Fn::GetAZs": {
                      "Ref": "AWS::Region"
                    }
                  }
                ]
              },
              "Tags": [
                {
                  "Key": "Name",
                  "Value": "Public subnet #2"
                }
              ]
            }
          },
          "PublicSubnetTwoRouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
              "SubnetId": {
                "Ref": "PublicSubnetTwo"
              },
              "RouteTableId": {
                "Ref": "PublicRouteTable"
              }
            }
          },
          "PrivateRouteTableOne": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
              "VpcId": {
                "Ref": "VPC"
              },
              "Tags": [
                {
                  "Key": "Name",
                  "Value": "Private Route Table #1"
                }
              ]
            }
          },
          "PrivateRouteToInternetOne": {
            "Type": "AWS::EC2::Route",
            "Properties": {
              "RouteTableId": {
                "Ref": "PrivateRouteTableOne"
              },
              "DestinationCidrBlock": "0.0.0.0/0",
              "NatGatewayId": {
                "Ref": "NATGatewayOne"
              }
            }
          },
          "PrivateSubnetOneRouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
              "SubnetId": {
                "Ref": "PrivateSubnetOne"
              },
              "RouteTableId": {
                "Ref": "PrivateRouteTableOne"
              }
            }
          },
          "PrivateSubnetOne": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
              "VpcId": {
                "Ref": "VPC"
              },
              "CidrBlock": "10.0.3.0/24",
              "AvailabilityZone": {
                "Fn::Select": [
                  "0",
                  {
                    "Fn::GetAZs": {
                      "Ref": "AWS::Region"
                    }
                  }
                ]
              },
              "Tags": [
                {
                  "Key": "Name",
                  "Value": "Private subnet #1"
                }
              ]
            }
          },
          "PrivateRouteTableTwo": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
              "VpcId": {
                "Ref": "VPC"
              },
              "Tags": [
                {
                  "Key": "Name",
                  "Value": "Private Route Table #2"
                }
              ]
            }
          },
          "PrivateRouteToInternetTwo": {
            "Type": "AWS::EC2::Route",
            "Properties": {
              "RouteTableId": {
                "Ref": "PrivateRouteTableTwo"
              },
              "DestinationCidrBlock": "0.0.0.0/0",
              "NatGatewayId": {
                "Ref": "NATGatewayTwo"
              }
            }
          },
          "PrivateSubnetTwoRouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
              "SubnetId": {
                "Ref": "PrivateSubnetTwo"
              },
              "RouteTableId": {
                "Ref": "PrivateRouteTableTwo"
              }
            }
          },
          "PrivateSubnetTwo": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
              "VpcId": {
                "Ref": "VPC"
              },
              "CidrBlock": "10.0.4.0/24",
              "AvailabilityZone": {
                "Fn::Select": [
                  "1",
                  {
                    "Fn::GetAZs": {
                      "Ref": "AWS::Region"
                    }
                  }
                ]
              },
              "Tags": [
                {
                  "Key": "Name",
                  "Value": "Private subnet #2"
                }
              ]
            }
          },
          "LambdaSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
              "GroupDescription": "Security group for Lambda Functions",
              "GroupName": "Lambda-SG",
              "Tags": [
                {
                  "Key": "Name",
                  "Value": "Lambda Security Group"
                }
              ],
              "VpcId": {
                "Ref": "VPC"
              },
              "SecurityGroupIngress": [
                {
                  "CidrIp": "0.0.0.0/0",
                  "IpProtocol": "-1"
                },
                {
                  "CidrIpv6": "::/0",
                  "IpProtocol": "-1"
                }
              ],
              "SecurityGroupEgress": [
                {
                  "CidrIp": "0.0.0.0/0",
                  "Description": "Allow all egress traffic",
                  "IpProtocol": "-1"
                },
                {
                  "CidrIpv6": "::/0",
                  "Description": "Allow all egress IPv6 traffic",
                  "IpProtocol": "-1"
                }
              ]
            }
          },
          "OrdersQueueExample": {
            "Type": "AWS::SQS::Queue",
            "Properties": {
              "QueueName": "dev-orderService-messages-logs",
              "MessageRetentionPeriod": 1209600,
              "VisibilityTimeout": 960
            }
          },
          "OrdersCatalog": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "dev-orderService-OrdersCatalog",
              "AttributeDefinitions": [
                {
                  "AttributeName": "orderId",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "orderId",
                  "KeyType": "HASH"
                }
              ],
              "ProvisionedThroughput": {
                "ReadCapacityUnits": 2,
                "WriteCapacityUnits": 1
              }
            }
          },
          "MessagesCatalog": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "dev-orderService-MessagesCatalog",
              "AttributeDefinitions": [
                {
                  "AttributeName": "orderId",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "orderId",
                  "KeyType": "HASH"
                }
              ],
              "ProvisionedThroughput": {
                "ReadCapacityUnits": 2,
                "WriteCapacityUnits": 1
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            },
            "Export": {
              "Name": "sls-orderService-dev-ServerlessDeploymentBucketName"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            },
            "Export": {
              "Name": "sls-orderService-dev-ServiceEndpoint"
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      }
    },
    "custom": {
      "region": "eu-west-1",
      "stage": "dev",
      "prefix": "dev-orderService",
      "process": "dev-orderService-process",
      "config": "dev-orderService-config",
      "dynamo-orders": "dev-orderService-OrdersCatalog",
      "dynamo-messages": "dev-orderService-MessagesCatalog",
      "sns-logs": "dev-orderService-trigger-logs",
      "sqs-logs": "dev-orderService-messages-logs",
      "serverless-offline": {
        "host": "0.0.0.0"
      },
      "splitStacks": {
        "perFunction": true,
        "perType": true
      },
      "serverless-offline-sqs-esmq": {
        "apiVersion": "2012-11-05",
        "endpoint": "http://sqs:9324",
        "region": "sa-east-1",
        "accessKeyId": "root",
        "secretAccessKey": "root"
      },
      "dynamodb": {
        "stages": [
          "local",
          "test",
          "dev"
        ],
        "start": {
          "host": "dynamo",
          "port": 8000,
          "inMemory": false,
          "migrate": true,
          "noStart": true
        }
      }
    },
    "plugins": [
      "serverless-pseudo-parameters",
      "serverless-dynamodb-local",
      "serverless-offline-scheduler",
      "serverless-offline-sqs-esmq",
      "serverless-offline"
    ],
    "pluginsData": {},
    "functions": {
      "Oders": {
        "handler": "modules/orders/endpoint/index.handler",
        "events": [
          {
            "http": {
              "path": "api/orders",
              "method": "post",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          },
          {
            "http": {
              "path": "api/orders/{orderId}",
              "method": "put",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "PUT"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "request": {
                "parameters": {
                  "method.request.path.orderId": true
                }
              },
              "integration": "AWS_PROXY"
            }
          },
          {
            "http": {
              "path": "api/orders",
              "method": "get",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          },
          {
            "http": {
              "path": "api/orders/{orderId}",
              "method": "get",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "request": {
                "parameters": {
                  "method.request.path.orderId": true
                }
              },
              "integration": "AWS_PROXY"
            }
          },
          {
            "http": {
              "path": "api/orders/{orderId}",
              "method": "delete",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "DELETE"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "request": {
                "parameters": {
                  "method.request.path.orderId": true
                }
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "orderService-dev-Oders",
        "package": {},
        "memory": 512,
        "timeout": 10,
        "runtime": "nodejs12.x",
        "vpc": {}
      },
      "MessageService": {
        "handler": "modules/orders/functions/MessageService/handler.messageService",
        "events": [
          {
            "sqs": {
              "arn": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"IamRoleLambdaExecution\"][\"Properties\"][\"Policies\"][0][\"PolicyDocument\"][\"Statement\"][5][\"Resource\"][0]"
              },
              "batchSize": 1
            }
          }
        ],
        "timeout": 900,
        "memorySize": 512,
        "reservedConcurrency": 5,
        "name": "orderService-dev-MessageService",
        "package": {},
        "memory": 512,
        "runtime": "nodejs12.x",
        "vpc": {}
      }
    },
    "resources": {
      "AWSTemplateFormatVersion": "2010-09-09",
      "Description": "Networking Stack",
      "Resources": {
        "VPC": {
          "Type": "AWS::EC2::VPC",
          "Properties": {
            "EnableDnsSupport": "true",
            "EnableDnsHostnames": "true",
            "CidrBlock": "10.0.0.0/16",
            "Tags": [
              {
                "Key": "Name",
                "Value": "VPC with public and private subnets (2 AZs) & NAT"
              },
              {
                "Key": "Project",
                "Value": "Prosperoware Content Sync"
              }
            ]
          }
        },
        "InternetGateway": {
          "Type": "AWS::EC2::InternetGateway",
          "Properties": {
            "Tags": [
              {
                "Key": "Name",
                "Value": "Internet Gateway"
              }
            ]
          }
        },
        "GatewayToInternet": {
          "Type": "AWS::EC2::VPCGatewayAttachment",
          "Properties": {
            "VpcId": {
              "Ref": "VPC"
            },
            "InternetGatewayId": {
              "Ref": "InternetGateway"
            }
          }
        },
        "NATGatewayOne": {
          "DependsOn": [
            "GatewayToInternet"
          ],
          "Type": "AWS::EC2::NatGateway",
          "Properties": {
            "AllocationId": {
              "Fn::GetAtt": [
                "ElasticIPOne",
                "AllocationId"
              ]
            },
            "SubnetId": {
              "Ref": "PublicSubnetOne"
            },
            "Tags": [
              {
                "Key": "Name",
                "Value": "NAT Gateway #1"
              }
            ]
          }
        },
        "ElasticIPOne": {
          "Type": "AWS::EC2::EIP",
          "Properties": {
            "Domain": "vpc",
            "Tags": [
              {
                "Key": "Name",
                "Value": "Elastic IP associated with NAT Gateway #1"
              }
            ]
          }
        },
        "NATGatewayTwo": {
          "DependsOn": [
            "GatewayToInternet"
          ],
          "Type": "AWS::EC2::NatGateway",
          "Properties": {
            "AllocationId": {
              "Fn::GetAtt": [
                "ElasticIPTwo",
                "AllocationId"
              ]
            },
            "SubnetId": {
              "Ref": "PublicSubnetTwo"
            },
            "Tags": [
              {
                "Key": "Name",
                "Value": "NAT Gateway #2"
              }
            ]
          }
        },
        "ElasticIPTwo": {
          "Type": "AWS::EC2::EIP",
          "Properties": {
            "Domain": "vpc",
            "Tags": [
              {
                "Key": "Name",
                "Value": "Elastic IP associated with NAT Gateway #2"
              }
            ]
          }
        },
        "PublicRouteTable": {
          "Type": "AWS::EC2::RouteTable",
          "Properties": {
            "VpcId": {
              "Ref": "VPC"
            },
            "Tags": [
              {
                "Key": "Name",
                "Value": "Public Route Table"
              }
            ]
          }
        },
        "PublicRoute": {
          "Type": "AWS::EC2::Route",
          "Properties": {
            "RouteTableId": {
              "Ref": "PublicRouteTable"
            },
            "DestinationCidrBlock": "0.0.0.0/0",
            "GatewayId": {
              "Ref": "InternetGateway"
            }
          }
        },
        "PublicSubnetOne": {
          "Type": "AWS::EC2::Subnet",
          "Properties": {
            "VpcId": {
              "Ref": "VPC"
            },
            "MapPublicIpOnLaunch": true,
            "CidrBlock": "10.0.1.0/24",
            "AvailabilityZone": {
              "Fn::Select": [
                "0",
                {
                  "Fn::GetAZs": {
                    "Ref": "AWS::Region"
                  }
                }
              ]
            },
            "Tags": [
              {
                "Key": "Name",
                "Value": "Public subnet #1"
              }
            ]
          }
        },
        "PublicSubnetOneRouteTableAssociation": {
          "Type": "AWS::EC2::SubnetRouteTableAssociation",
          "Properties": {
            "SubnetId": {
              "Ref": "PublicSubnetOne"
            },
            "RouteTableId": {
              "Ref": "PublicRouteTable"
            }
          }
        },
        "PublicSubnetTwo": {
          "Type": "AWS::EC2::Subnet",
          "Properties": {
            "VpcId": {
              "Ref": "VPC"
            },
            "MapPublicIpOnLaunch": true,
            "CidrBlock": "10.0.2.0/24",
            "AvailabilityZone": {
              "Fn::Select": [
                "1",
                {
                  "Fn::GetAZs": {
                    "Ref": "AWS::Region"
                  }
                }
              ]
            },
            "Tags": [
              {
                "Key": "Name",
                "Value": "Public subnet #2"
              }
            ]
          }
        },
        "PublicSubnetTwoRouteTableAssociation": {
          "Type": "AWS::EC2::SubnetRouteTableAssociation",
          "Properties": {
            "SubnetId": {
              "Ref": "PublicSubnetTwo"
            },
            "RouteTableId": {
              "Ref": "PublicRouteTable"
            }
          }
        },
        "PrivateRouteTableOne": {
          "Type": "AWS::EC2::RouteTable",
          "Properties": {
            "VpcId": {
              "Ref": "VPC"
            },
            "Tags": [
              {
                "Key": "Name",
                "Value": "Private Route Table #1"
              }
            ]
          }
        },
        "PrivateRouteToInternetOne": {
          "Type": "AWS::EC2::Route",
          "Properties": {
            "RouteTableId": {
              "Ref": "PrivateRouteTableOne"
            },
            "DestinationCidrBlock": "0.0.0.0/0",
            "NatGatewayId": {
              "Ref": "NATGatewayOne"
            }
          }
        },
        "PrivateSubnetOneRouteTableAssociation": {
          "Type": "AWS::EC2::SubnetRouteTableAssociation",
          "Properties": {
            "SubnetId": {
              "Ref": "PrivateSubnetOne"
            },
            "RouteTableId": {
              "Ref": "PrivateRouteTableOne"
            }
          }
        },
        "PrivateSubnetOne": {
          "Type": "AWS::EC2::Subnet",
          "Properties": {
            "VpcId": {
              "Ref": "VPC"
            },
            "CidrBlock": "10.0.3.0/24",
            "AvailabilityZone": {
              "Fn::Select": [
                "0",
                {
                  "Fn::GetAZs": {
                    "Ref": "AWS::Region"
                  }
                }
              ]
            },
            "Tags": [
              {
                "Key": "Name",
                "Value": "Private subnet #1"
              }
            ]
          }
        },
        "PrivateRouteTableTwo": {
          "Type": "AWS::EC2::RouteTable",
          "Properties": {
            "VpcId": {
              "Ref": "VPC"
            },
            "Tags": [
              {
                "Key": "Name",
                "Value": "Private Route Table #2"
              }
            ]
          }
        },
        "PrivateRouteToInternetTwo": {
          "Type": "AWS::EC2::Route",
          "Properties": {
            "RouteTableId": {
              "Ref": "PrivateRouteTableTwo"
            },
            "DestinationCidrBlock": "0.0.0.0/0",
            "NatGatewayId": {
              "Ref": "NATGatewayTwo"
            }
          }
        },
        "PrivateSubnetTwoRouteTableAssociation": {
          "Type": "AWS::EC2::SubnetRouteTableAssociation",
          "Properties": {
            "SubnetId": {
              "Ref": "PrivateSubnetTwo"
            },
            "RouteTableId": {
              "Ref": "PrivateRouteTableTwo"
            }
          }
        },
        "PrivateSubnetTwo": {
          "Type": "AWS::EC2::Subnet",
          "Properties": {
            "VpcId": {
              "Ref": "VPC"
            },
            "CidrBlock": "10.0.4.0/24",
            "AvailabilityZone": {
              "Fn::Select": [
                "1",
                {
                  "Fn::GetAZs": {
                    "Ref": "AWS::Region"
                  }
                }
              ]
            },
            "Tags": [
              {
                "Key": "Name",
                "Value": "Private subnet #2"
              }
            ]
          }
        },
        "LambdaSecurityGroup": {
          "Type": "AWS::EC2::SecurityGroup",
          "Properties": {
            "GroupDescription": "Security group for Lambda Functions",
            "GroupName": "Lambda-SG",
            "Tags": [
              {
                "Key": "Name",
                "Value": "Lambda Security Group"
              }
            ],
            "VpcId": {
              "Ref": "VPC"
            },
            "SecurityGroupIngress": [
              {
                "CidrIp": "0.0.0.0/0",
                "IpProtocol": "-1"
              },
              {
                "CidrIpv6": "::/0",
                "IpProtocol": "-1"
              }
            ],
            "SecurityGroupEgress": [
              {
                "CidrIp": "0.0.0.0/0",
                "Description": "Allow all egress traffic",
                "IpProtocol": "-1"
              },
              {
                "CidrIpv6": "::/0",
                "Description": "Allow all egress IPv6 traffic",
                "IpProtocol": "-1"
              }
            ]
          }
        },
        "OrdersQueueExample": {
          "Type": "AWS::SQS::Queue",
          "Properties": {
            "QueueName": "dev-orderService-messages-logs",
            "MessageRetentionPeriod": 1209600,
            "VisibilityTimeout": 960
          }
        },
        "OrdersCatalog": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "dev-orderService-OrdersCatalog",
            "AttributeDefinitions": [
              {
                "AttributeName": "orderId",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "orderId",
                "KeyType": "HASH"
              }
            ],
            "ProvisionedThroughput": {
              "ReadCapacityUnits": 2,
              "WriteCapacityUnits": 1
            }
          }
        },
        "MessagesCatalog": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "dev-orderService-MessagesCatalog",
            "AttributeDefinitions": [
              {
                "AttributeName": "orderId",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "orderId",
                "KeyType": "HASH"
              }
            ],
            "ProvisionedThroughput": {
              "ReadCapacityUnits": 2,
              "WriteCapacityUnits": 1
            }
          }
        }
      },
      "Outputs": {}
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless.yml",
    "layers": {},
    "initialServerlessConfig": {
      "service": {
        "$ref": "$[\"service\"][\"serviceObject\"]"
      },
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "custom": {
        "$ref": "$[\"service\"][\"custom\"]"
      },
      "plugins": {
        "$ref": "$[\"service\"][\"plugins\"]"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      },
      "resources": {
        "$ref": "$[\"service\"][\"resources\"]"
      }
    },
    "isDashboardMonitoringPreconfigured": false,
    "artifact": "C:\\Users\\DoretaMaliqi\\Desktop\\TEMAd\\OrderService\\.serverless\\orderService.zip"
  },
  "package": {
    "artifactDirectoryName": "serverless/orderService/dev/1619570759412-2021-04-28T00:45:59.412Z",
    "artifact": "orderService.zip"
  }
}