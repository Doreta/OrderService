service: orderService

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'prod'}
  region: ${opt:region, 'us-east-1'}
  timeout: 10 #Default Lambda timeout 
  memorySize: 512 #Default Lambda Memory Size
  versionFunctions: false # No functions versioning 
  #role: arn:aws:iam::#{AWS::AccountId}:role/existing-role
  vpc:
    securityGroupIds:
      - 'Fn::ImportValue': LambdaSecurityGroup
    subnetIds:
      - 'Fn::ImportValue': PrivateSubnetOne
      - 'Fn::ImportValue': PrivateSubnetTwo
  package:
    excludeDevDependencies: true
    exclude:
      - .git/**
      - .vscode/**
      - .test/**
  
  environment: #Global Environment variables
      ${file(./configs/${self:provider.stage}.yml)}

  iamRoleStatements: # Permissions for all of your functions can be set here

  - Effect: Allow
    Action: # Gives permission to DynamoDB tables in a specific region
      - dynamodb:DescribeTable
      - dynamodb:Query
      - dynamodb:Scan
      - dynamodb:GetItem
      - dynamodb:PutItem
      - dynamodb:UpdateItem
      - dynamodb:DeleteItem
    Resource: "arn:aws:dynamodb:*:*:*"

  - Effect: Allow
    Action: # Gives permission to Lambda execution
      - lambda:InvokeFunction
      - lambda:InvokeAsync
    Resource: "*"

  - Effect: Allow
    Action: # Gives permission to SQS 
      - sqs:DeleteMessage
      - sqs:ReceiveMessage
      - sqs:SendMessage
    Resource: arn:aws:sqs:*:*:*

# custom:
#   region: ${self:provider.region}
#   stage: ${opt:stage, self:provider.stage}
#   prefix: ${self:custom.stage}-${self:service}
#   process: ${self:custom.prefix}-process
#   config: ${self:custom.prefix}-config
#   dynamo-orders: ${self:custom.prefix}-OrdersCatalog
#   dynamo-messages: ${self:custom.prefix}-MessagesCatalog
#   sns-logs: ${self:custom.prefix}-trigger-logs
#   sqs-logs: ${self:custom.prefix}-messages-logs

  serverless-offline:
    host: '0.0.0.0'

  splitStacks:
    perFunction: true
    perType: true

  serverless-offline-sqs-esmq:
    apiVersion: '2012-11-05'
    endpoint: http://sqs:9324
    region: sa-east-1
    accessKeyId: root
    secretAccessKey: root

  dynamodb:
    stages:
      - local
      - test
      - dev

    start:
      host: "dynamo"
      port: 8000
      inMemory: false
      migrate: true
      noStart: true


plugins:
  # - serverless-pseudo-parameters
  - serverless-dynamodb-local
  - serverless-offline-scheduler
  - serverless-offline-sqs-esmq
  - serverless-offline

functions:
  Oders:
    handler: modules/orders/endpoint/index.handler
    events:
      - http:
          path: /api/orders
          method: post
          cors: true
      - http:
          path: /api/orders/{orderId}
          method: put
          cors: true
          request:
            parameters:
              paths:
                orderId: true
      - http:
          path: /api/orders
          method: get
          cors: true
      - http:
          path: /api/orders/{orderId}
          method: get
          cors: true
          request:
            parameters:
              paths:
                orderId: true
      - http:
          path: /api/orders/{orderId}
          method: delete
          cors: true
          request:
            parameters:
              paths:
                orderId: true
  MessageService:
    handler: modules/orders/functions/MessageService/handler.messageService
    events:
      - sqs:
          arn: 
            'Fn::ImportValue': OrdersQueueArn
          batchSize: 1
    timeout: 900
    memorySize: 512
    reservedConcurrency: 5



